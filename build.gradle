buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenLocal()
    }
    dependencies {
        classpath 'io.spring.gradle:spring-release-plugin:0.20.1'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.2.0'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.5.0'
        classpath 'com.netflix.nebula:nebula-project-plugin:3.4.0'

        constraints {
            classpath('org.ow2.asm:asm:7.3.1') {
                because 'Supports modern JDKs'
            }

            classpath('org.jfrog.buildinfo:build-info-extractor-gradle:4.13.0') {
                because 'Need recent version for Gradle 6+ compatibility'
            }
        }
    }

    configurations.classpath.resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'
}

apply plugin: 'io.spring.release'

allprojects {
    apply plugin: 'io.spring.license'

    afterEvaluate { project ->
        println "I'm configuring $project.name with version $project.version"
    }
    group = 'io.micrometer'
}

subprojects {
    if (project.name != 'micrometer-bom') {
        apply plugin: 'java'
        apply plugin: 'checkstyle'

        tasks {
            compileJava {
                options.encoding = 'UTF-8'
                options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
                // ensure Java 8 baseline is enforced for main source
                if (JavaVersion.current().isJava9Compatible()) {
                    options.compilerArgs.addAll(['--release', '8'])
                }
            }
            compileTestJava {
                options.encoding = 'UTF-8'
                options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
                sourceCompatibility = JavaVersion.current()
                targetCompatibility = JavaVersion.current()
            }
        }

        //noinspection GroovyAssignabilityCheck
        test {
            // set heap size for the test JVM(s)
            maxHeapSize = "1500m"

            useJUnitPlatform()
        }

        checkstyle {
            toolVersion = '8.23'
            configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        }

        license {
            ext.year = Calendar.getInstance().get(Calendar.YEAR)
            skipExistingHeaders = true
        }
    }

    plugins.withId('maven-publish') {
        publishing {
            publications {
                nebula(MavenPublication) {
                    // Nebula converts dynamic versions to static ones so it's ok.
                    suppressPomMetadataWarningsFor('apiElements')
                }
            }
        }

        // Nebula doesn't interface with Gradle's module format so just disable it for now.
        tasks.withType(GenerateModuleMetadata) {
            enabled = false
        }
    }

    dependencyLocking {
        lockAllConfigurations()
    }

    task resolveAndLockAll {
        doFirst {
            assert gradle.startParameter.writeDependencyLocks
        }
        doLast {
            def skip = ['annotationProcessor', 'apt', 'testAnnotationProcessor', 'checkstyle',
                'shadow', 'testApt', 'archives', 'junitPlatform']
            configurations.each {
                if (it.canBeResolved && !skip.contains(it.name)) {
                    it.resolve()
                }
            }
        }
    }

    if(!['samples', 'benchmarks'].find{project.name.contains(it)}) {
        apply plugin: 'io.spring.publishing'

        contacts {
            'jschneider@pivotal.io' {
                moniker 'Jon Schneider'
                github 'jkschneider'
            }
        }

        if (project.extensions.findByName('bintray')) {
            bintray.labels = ['micrometer', 'atlas', 'metrics', 'prometheus', 'spectator', 'influx', 'new-relic', 'signalfx', 'wavefront', 'elastic', 'dynatrace', 'azure-monitor', 'appoptics', 'kairos', 'stackdriver']
            bintray.packageName = 'io.micrometer'
        }
    }

    description = 'Application monitoring instrumentation facade'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    def check = tasks.findByName('check')
    if (check) project.rootProject.tasks.releaseCheck.dependsOn check
}

wrapper {
    gradleVersion = '6.1'
}

defaultTasks 'build'
